package NowCoder.Nowcoder;

/*
    写一个函数，求两个整数之和，要求在函数体内不得使用+、-、*、/四则运算符号
    TODO 逻辑运算符
        1. 与 &：全为1才为0，否则都为0
        2. 或 |：有一个为1就为1，全0为0
        3. 异或 ^：不同为1，相同为0
        4. && || 带有短路效应
 */
public class code48_AddProblem {
    /*
        变成二进制加法，而在二进制加法中，如果都为1，需要进位，那么考虑拆成 不进位的结果A和 只有进位的结果B
        例如：5+6 = 0 1 0 1
                 + 0 1 1 0
             那么 不进位结果（也就是不相同的加）A = 0 0 1 1
                 只有进位结果（也就是只看相同的加）B = 1 0 0 0
             然后重复操作 0 0 1 1
                      + 1 0 0 0
             此时，没有相同的，所以直接加得到 1 0 1 1，就是最终结果。
         TODO 二叉树总结：
            1. 不进位结果的计算方法：只有不同时才加（加后等于1），相同直接为0 ==> 异或
            2. 进位结果的计算方法：相同时才加（加后等于1），且1要进位到前面一位 ==> 与 + 左移1一位
            3. 结束条件：没有进位时就是结果
     */
    public static int addProblem(int a, int b){
        // 这里因为是重复累加，所以直接将结果存到a和b中
        while (b != 0){
            // 只含进位的结果 TODO 必须先计算进位结果，因为在这里我们直接用a存储不进位的结果，如果先算不进位结果，a就变了
            int B = (a & b) << 1;

            // 不进位的结果
            a ^= b;

            b = B;
        }

        return a;
    }

    public static void main(String[] args) {
        System.out.println(addProblem(5, 6)); // 11
    }
}
